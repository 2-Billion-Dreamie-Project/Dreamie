extends ../../layouts/admin/layout_admin

block title 
  title Thêm danh mục

block append style
  link(rel='stylesheet', href='/bower_components/select2/dist/css/select2.min.css')
  link(rel='stylesheet', href='/assets/css/category_admin.min.css')

block content
  if messCategory && messCategory !== ''
    div.mb-4.mess-create
      h5=messCategory
      
  .admin-category
    form(action='/admin/category/save-category', method='POST' id="form-category" novalidate)
      input(type="hidden" name="_csrf" value=csrfToken)
      if category && category._id !== 'undefined'
        input(type="hidden" name="_id" value=category._id)
      .form-group
        label(for='name-category') Tên danh mục
        input#name-category.form-control(
          name='name', 
          type='text', 
          placeholder='Nhập tên category',
          value=category && category.name ? category.name : '',
        )

      if category && category._id
        if category.parentId !== '' && !category.parentId.equals(category._id)
          .form-group
            label(for='categoryParentId') Thuộc danh mục
            select#categoryParentId.form-control(name='categoryParentId')
              
      else 
        .form-group
          label(for='categoryParentId') Thuộc danh mục
          select#categoryParentId.form-control(name='categoryParentId')
              



      .form-group
        label(for='image-category') Ảnh đại diện danh mục
        input#image-category.form-control(
          name='image', 
          type='text',
          value=category && category.image ? category.image : '',
        )

      .form-check.form-check-flat.form-check-primary.mb-3
        label.form-check-label
          input(name='homeMode', type='checkbox', checked=category.homeMode).form-check-warning
          | Hiển thị trang chủ
      button.btn.btn-success.mr-2(type='submit') Lưu
      a.btn.btn-light(href="/admin/category/list-category") Trở lại

  script(src='/bower_components/jquery/dist/jquery.min.js')
  script(src='/bower_components/jquery-validation/dist/jquery.validate.min.js')
  script(src='/bower_components/jquery-validation/dist/additional-methods.min.js')
  script(src='/bower_components/select2/dist/js/select2.min.js')
 
  script.
    $(document).ready(function() {
      $("#form-category").validate({
        rules: {
          name: {
            required: true,
          },
          image:{
            required: true,
            url: true,
          },
        },
        messages: {
          name: {
            required: "Vui lòng điền tên danh mục",
            minlength: "Tên danh mục ít nhất có 5 ký tự",
            maxlength: "Tên danh mục không quá 20 ký tự"
          },
          image:{
            required: "Vui lòng điền ảnh danh mục",
            url: "Vui lòng điền đúng định dạng url"
          },
        },
        errorPlacement: function(error, element) {
          $(error).addClass('text-danger mt-2');
          $(element).addClass('form-control-danger');

          error.insertAfter(element);
        }
      });

      if ($('#categoryParentId').length > 0) {
        let categories = $('#categoryParentId').select2({
          allowClear: true,
          placeholder: "Danh mục cha",
          width: '100%',
          ajax: {
            url: 'http://localhost:3000/admin/category/api/list-category',
            dataType: 'json',
            delay: 360,
            data: function (params) {
              
              var query = {
                search: params.term,
                page: params.page || 1
              }

              // Query parameters will be ?search=[term]&type=public
              return query;
            },
            processResults: function (data, params) {
              console.log({params, data});
              let dataValue = [];
              params.page = params.page || 1;
              let { categories, total } = data;

              if (categories && categories.length > 0) {
                  for (let value of categories) {
                    let newObj = {
                      id: value._id,
                      text: value.name,
                    }

                    dataValue.push(newObj);
                  }

              }

              return {
                results: dataValue,
                pagination: {
                  more: (params.page * 10) < total,
                },
              };
              
            }

          }

        });

        let category = !{category ? JSON.stringify(category) : undefined}

        if (category && category._id) {
          if (category.parentId && category.parentId._id !== '') {
            let option = new Option(category.parentId.name, category.parentId._id, true, true);
            categories.append(option).trigger('change');
          }
        }
      }

    });

    
    


